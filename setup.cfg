[metadata]
name = placement
summary = Cloud computing resource tracking and allocation
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = https://docs.openstack.org/placement/latest/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.5

[global]
setup-hooks =
    pbr.hooks.setup_hook

[files]
packages =
    placement

[entry_points]
oslo.config.opts =
    placement.conf = placement.conf.opts:list_opts

oslo.policy.enforcer =
    placement = placement.api.policy:get_enforcer

oslo.policy.policies =
    # The sample policies will be ordered by entry point and then by list
    # returned from that entry point. If more control is desired split out each
    # list_rules method into a separate entry point rather than using the
    # aggregate method.
    placement = placement.api.policies:list_rules

console_scripts =
    # FIXME(cdent): we will need something here
    # nova-manage = nova.cmd.manage:main
wsgi_scripts =
    placement-api = placement.api.wsgi:init_application

[egg_info]
tag_build =
tag_date = 0
tag_svn_revision = 0

# FIXME(cdent)
[compile_catalog]
directory = nova/locale
domain = nova

# FIXME(cdent)
[update_catalog]
domain = nova
output_dir = nova/locale
input_file = nova/locale/nova.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = nova/locale/nova.pot

[wheel]
universal = 1

# FIXME(cdent): ?
[extras]
osprofiler =
  osprofiler>=1.4.0 # Apache-2.0
